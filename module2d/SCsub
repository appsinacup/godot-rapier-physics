#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

def get_sufix():
    suffix = ".{}.{}".format(env["platform"], env["target"])
    # In godot it's "linuxbsd"
    suffix = suffix.replace("linuxbsd", "linux")
    # Only take release
    suffix = suffix.replace("editor", "template_release")
    suffix = suffix.replace("template_debug", "template_release")
    if env.dev_build:
        suffix += ".dev"
    if env["precision"] == "double":
        suffix += ".double"
    suffix += "." + env["arch"]
    if not env["threads"]:
        suffix += ".nothreads"
    return suffix

# Libraries
match env["platform"]:
    case "macos":
        base_path = "#modules/rapier_2d/addons/godot-rapier2d/bin/libgodot_rapier.macos.framework"
        match env["arch"]:
            case "arm64":
                base_file = "libgodot_rapier.macos.arm64.a"
            case "x86_64":
                base_file = "libgodot_rapier.macos.x86_64.a"
            case _:
                raise Exception("Unknown arch: {}".format(env["arch"]))
    case _:
        raise Exception("Unknown arch: {}".format(env["arch"]))

env.Append(LIBS=[base_file])
env.Append(LIBPATH=[base_path])

# Godot-cpp
base_path = "#modules/rapier_2d/ext/godot-cpp/bin"
base_file = "libgodot-cpp{}".format(get_sufix())

env.Append(LIBS=[base_file])
env.Append(LIBPATH=[base_path])

# Sources
env_gdextension = env_modules.Clone()

env_gdextension.add_source_files(env.modules_sources, "*.cpp")
